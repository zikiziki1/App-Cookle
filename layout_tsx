import React, { useState, useEffect } from "react";
import { NavigationContainer } from "@react-navigation/native";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  FlatList,
  TextInput,
  Image,
} from "react-native";
import { Ionicons } from "@expo/vector-icons"; //Reminder- Is pour les placeholders d'images
import axios from "axios"; //Reminder- Axios is pour les requests REST APIs
import AsyncStorage from "@react-native-async-storage/async-storage";

const Tab = createBottomTabNavigator();

const HomeScreen = () => {
  const [recipes, setRecipes] = useState([]);

  const generateUniqueRecipe = () => {
    // AI generation simplifiée
    const newRecipe = {
      id: Date.now(),
      title: `AI-Generated Recipe ${recipes.length + 1}`, //
      image: "image générée lors de la requete", //Insérer l'image fournie par la génération de recette
      ingredients: ["Ingredient 1", "Ingredient 2", "Ingredient 3"],
      instructions: [
        "Step 1: step1",
        "Step 2: step2",
        "Step 3: step3",
        "Step 4: Step4",
      ],
    };
    setRecipes([...recipes, newRecipe]);
  };

  const fetchRandomRecipe = async () => {
    try {
      const response = await axios.get(
        "https://www.themealdb.com/api/json/v1/1/random.php" //API Link/Lien de l'API
      );
      const meal = response.data.meals[0];
      const newRecipe = {
        id: meal.idMeal,
        title: meal.strMeal,
        image: meal.strMealThumb,
        ingredients: Object.keys(meal)
          .filter((key) => key.startsWith("strIngredient") && meal[key])
          .map((key) => meal[key]),
        instructions: meal.strInstructions.split("\n"),
      };
      setRecipes([...recipes, newRecipe]);
    } catch (error) {
      console.error("Error fetching la random recipe:", error);
    }
  };

  //Debug needed
  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={generateUniqueRecipe}>
        <Text style={styles.buttonText}>Generate Unique Recipe</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.button} onPress={fetchRandomRecipe}>
        <Text style={styles.buttonText}>Fetch Random Recipe</Text>
      </TouchableOpacity>
      <FlatList
        data={recipes}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => (
          <View style={styles.recipeCard}>
            <Text style={styles.recipeTitle}>{item.title}</Text>
            <Image source={{ uri: item.image }} style={styles.recipeImage} />
          </View>
        )}
      />
    </View>
  );
};

const IngredientScreen = () => {
  const [ingredients, setIngredients] = useState("");
  const [generatedRecipe, setGeneratedRecipe] = useState(null);

  const generateRecipeFromIngredients = () => {
    // Version Simplifiée de la génération de recette - Need Incorporate une requete AI
    const newRecipe = {
      id: Date.now(),
      title: `Recipe with ${ingredients}`,
      image: "//image générée lors de la requete",
      ingredients: ingredients.split(",").map((item) => item.trim()),
      instructions: ["Step 1: exemple", "Step 2: etc ", "Step 3: etc "],
    };
    setGeneratedRecipe(newRecipe);
  };

  return (
    <View style={styles.container}>
      {" "}
      //Make interface better avec cards
      <TextInput
        style={styles.input}
        value={ingredients}
        onChangeText={setIngredients}
        placeholder="Enter ingredients séparés par coma"
      />
      <TouchableOpacity
        style={styles.button}
        onPress={generateRecipeFromIngredients}
      >
        <Text style={styles.buttonText}>Generate from Ingredients</Text> //Need
        styliser les boutons
      </TouchableOpacity>
      {generatedRecipe && (
        <View style={styles.recipeCard}>
          <Text style={styles.recipeTitle}>{generatedRecipe.title}</Text>
          <Image
            source={{ uri: generatedRecipe.image }}
            style={styles.recipeImage}
          />
        </View>
      )}
    </View>
  );
};

const PlannerScreen = () => {
  const [weeklyPlan, setWeeklyPlan] = useState({});

  const planMealsForWeek = async () => {
    const plan = {};
    const days = [
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
      "Sunday",
    ];
    for (let day of days) {
      try {
        const response = await axios.get(
          "https://www.themealdb.com/api/json/v1/1/random.php"
        );
        const meal = response.data.meals[0];
        plan[day] = {
          id: meal.idMeal,
          title: meal.strMeal,
          image: meal.strMealThumb,
        };
      } catch (error) {
        console.error(`Error fetching meal for ${day}:`, error);
        plan[day] = { title: "Failed to fetch meal" };
      }
    }
    setWeeklyPlan(plan);
    await AsyncStorage.setItem("weeklyPlan", JSON.stringify(plan));
  };

  useEffect(() => {
    const loadWeeklyPlan = async () => {
      const storedPlan = await AsyncStorage.getItem("weeklyPlan");
      if (storedPlan) {
        setWeeklyPlan(JSON.parse(storedPlan));
      }
    };
    loadWeeklyPlan();
  }, []);

  return (
    //Need aussi concentrer sur le design de l'interface - still idée de cards
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={planMealsForWeek}>
        <Text style={styles.buttonText}>Plan Meals for Week</Text>
      </TouchableOpacity>
      <FlatList
        data={Object.entries(weeklyPlan)}
        keyExtractor={([day]) => day}
        renderItem={({ item: [day, meal] }) => (
          <View style={styles.planItem}>
            <Text style={styles.planDay}>{day}</Text>
            <Text style={styles.planMeal}>{meal.title}</Text>
          </View>
        )}
      />
    </View>
  );
};

const GroceryListScreen = () => {
  const [groceryList, setGroceryList] = useState([]);

  const createGroceryList = async () => {
    const storedPlan = await AsyncStorage.getItem("weeklyPlan");
    if (storedPlan) {
      const plan = JSON.parse(storedPlan);
      const ingredients = new Set();
      for (let day in plan) {
        try {
          const response = await axios.get(
            `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${plan[day].id}` //Rajouter les quantités
          );
          const meal = response.data.meals[0];
          for (let i = 1; i <= 20; i++) {
            const ingredient = meal[`strIngredient${i}`];
            if (ingredient) {
              ingredients.add(ingredient);
            }
          }
        } catch (error) {
          console.error(`Error fetching ingredients for ${day}:`, error);
        }
      }
      setGroceryList(Array.from(ingredients));
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={createGroceryList}>
        <Text style={styles.buttonText}>Create Grocery List</Text>
      </TouchableOpacity>
      <FlatList
        data={groceryList}
        keyExtractor={(item) => item}
        renderItem={({ item }) => (
          <Text style={styles.groceryItem}>{item}</Text>
        )}
      />
    </View>
  );
};

const AIRecetteApp = () => {
  return (
    <NavigationContainer>
      <Tab.Navigator
        screenOptions={({ route }) => ({
          tabBarIcon: ({ focused, color, size }) => {
            let iconName;
            if (route.name === "Home") {
              iconName = focused ? "home" : "home-outline";
            } else if (route.name === "Ingredients") {
              iconName = focused ? "list" : "list-outline";
            } else if (route.name === "Planner") {
              iconName = focused ? "calendar" : "calendar-outline";
            } else if (route.name === "Grocery") {
              iconName = focused ? "cart" : "cart-outline";
            }
            return <Ionicons nom={iconName} size={size} color={color} />;
          },
        })}
      >
        <Tab.Screen nom="Home" component={HomeScreen} />
        <Tab.Screen nom="Ingredients" component={IngredientScreen} />
        <Tab.Screen nom="Planner" component={PlannerScreen} />
        <Tab.Screen nom="Grocery" component={GroceryListScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  button: {
    backgroundColor: "black",
    padding: 15,
    borderRadius: 10,
    marginVertical: 10,
    alignItems: "center",
  },
  buttonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
  input: {
    borderWidth: 1,
    borderColor: "gray",
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
  recipeCard: {
    marginVertical: 10,
    padding: 10,
    backgroundColor: "#f0f0f0",
    borderRadius: 5,
  },
  recipeTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 5,
  },
  recipeImage: {
    width: "100%",
    height: 200,
    resizeMode: "cover",
    borderRadius: 5,
  },
  planItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ccc",
  },
  planDay: {
    fontWeight: "bold",
  },
  planMeal: {
    flex: 1,
    marginLeft: 10,
  },
  groceryItem: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ccc",
  },
});

export default AIRecetteApp;
